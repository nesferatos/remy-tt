/**
 */
package com.remyrobotics.remytt_model.provider;

import com.remyrobotics.remytt_model.util.Remytt_modelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Remytt_modelItemProviderAdapterFactory extends Remytt_modelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Remytt_modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Kitchen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KitchenItemProvider kitchenItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Kitchen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKitchenAdapter() {
		if (kitchenItemProvider == null) {
			kitchenItemProvider = new KitchenItemProvider(this);
		}

		return kitchenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.AxisRobot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisRobotItemProvider axisRobotItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.AxisRobot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisRobotAdapter() {
		if (axisRobotItemProvider == null) {
			axisRobotItemProvider = new AxisRobotItemProvider(this);
		}

		return axisRobotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.OvenConveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OvenConveyorItemProvider ovenConveyorItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.OvenConveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOvenConveyorAdapter() {
		if (ovenConveyorItemProvider == null) {
			ovenConveyorItemProvider = new OvenConveyorItemProvider(this);
		}

		return ovenConveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Mozzarella} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MozzarellaItemProvider mozzarellaItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Mozzarella}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMozzarellaAdapter() {
		if (mozzarellaItemProvider == null) {
			mozzarellaItemProvider = new MozzarellaItemProvider(this);
		}

		return mozzarellaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.TomatoSauce} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TomatoSauceItemProvider tomatoSauceItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.TomatoSauce}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTomatoSauceAdapter() {
		if (tomatoSauceItemProvider == null) {
			tomatoSauceItemProvider = new TomatoSauceItemProvider(this);
		}

		return tomatoSauceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.PizzaCrust} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PizzaCrustItemProvider pizzaCrustItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.PizzaCrust}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPizzaCrustAdapter() {
		if (pizzaCrustItemProvider == null) {
			pizzaCrustItemProvider = new PizzaCrustItemProvider(this);
		}

		return pizzaCrustItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Box} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoxItemProvider boxItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Box}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoxAdapter() {
		if (boxItemProvider == null) {
			boxItemProvider = new BoxItemProvider(this);
		}

		return boxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.MozzarellaDispenser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MozzarellaDispenserItemProvider mozzarellaDispenserItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.MozzarellaDispenser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMozzarellaDispenserAdapter() {
		if (mozzarellaDispenserItemProvider == null) {
			mozzarellaDispenserItemProvider = new MozzarellaDispenserItemProvider(this);
		}

		return mozzarellaDispenserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.SauceDispenser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SauceDispenserItemProvider sauceDispenserItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.SauceDispenser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSauceDispenserAdapter() {
		if (sauceDispenserItemProvider == null) {
			sauceDispenserItemProvider = new SauceDispenserItemProvider(this);
		}

		return sauceDispenserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageItemProvider storageItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageAdapter() {
		if (storageItemProvider == null) {
			storageItemProvider = new StorageItemProvider(this);
		}

		return storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Bake} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BakeItemProvider bakeItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Bake}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBakeAdapter() {
		if (bakeItemProvider == null) {
			bakeItemProvider = new BakeItemProvider(this);
		}

		return bakeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.AddIngredient} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddIngredientItemProvider addIngredientItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.AddIngredient}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddIngredientAdapter() {
		if (addIngredientItemProvider == null) {
			addIngredientItemProvider = new AddIngredientItemProvider(this);
		}

		return addIngredientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Cut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CutItemProvider cutItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Cut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCutAdapter() {
		if (cutItemProvider == null) {
			cutItemProvider = new CutItemProvider(this);
		}

		return cutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.Cutter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CutterItemProvider cutterItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.Cutter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCutterAdapter() {
		if (cutterItemProvider == null) {
			cutterItemProvider = new CutterItemProvider(this);
		}

		return cutterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.remyrobotics.remytt_model.NoPizzaCrust} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoPizzaCrustItemProvider noPizzaCrustItemProvider;

	/**
	 * This creates an adapter for a {@link com.remyrobotics.remytt_model.NoPizzaCrust}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoPizzaCrustAdapter() {
		if (noPizzaCrustItemProvider == null) {
			noPizzaCrustItemProvider = new NoPizzaCrustItemProvider(this);
		}

		return noPizzaCrustItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (kitchenItemProvider != null)
			kitchenItemProvider.dispose();
		if (axisRobotItemProvider != null)
			axisRobotItemProvider.dispose();
		if (ovenConveyorItemProvider != null)
			ovenConveyorItemProvider.dispose();
		if (tableItemProvider != null)
			tableItemProvider.dispose();
		if (mozzarellaItemProvider != null)
			mozzarellaItemProvider.dispose();
		if (tomatoSauceItemProvider != null)
			tomatoSauceItemProvider.dispose();
		if (pizzaCrustItemProvider != null)
			pizzaCrustItemProvider.dispose();
		if (boxItemProvider != null)
			boxItemProvider.dispose();
		if (mozzarellaDispenserItemProvider != null)
			mozzarellaDispenserItemProvider.dispose();
		if (sauceDispenserItemProvider != null)
			sauceDispenserItemProvider.dispose();
		if (storageItemProvider != null)
			storageItemProvider.dispose();
		if (bakeItemProvider != null)
			bakeItemProvider.dispose();
		if (addIngredientItemProvider != null)
			addIngredientItemProvider.dispose();
		if (cutItemProvider != null)
			cutItemProvider.dispose();
		if (cutterItemProvider != null)
			cutterItemProvider.dispose();
		if (noPizzaCrustItemProvider != null)
			noPizzaCrustItemProvider.dispose();
	}

}
